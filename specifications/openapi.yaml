openapi: 3.1.0

info:
    title: PassWordManagerAPI
    version: 1.1.0
    description: >-
        PassWordManager API used to manage users, personal credential databases and
        the services offered to the user
    contact:
        email: lukaarma@gmail.com
    license:
        name: MIT
        url: "https://opensource.org/licenses/MIT"

servers:
    - url: "https://dev.lukaarma.dynu.net/api"
      description: Development environment
    - url: "https://pwm.lukaarma.dynu.net/api"
      description: Production environment

paths:
    /user/login:
        post:
            summary: Login to existing user
            security: []

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - password
                            properties:
                                email:
                                    type: string
                                password:
                                    type: string
                                    format: password

            responses:
                "200":
                    description: Login successful
                    content:
                        application/json:
                            schema:
                                type: object
                                required:
                                    - firstName
                                properties:
                                    firstName:
                                        type: string
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/signup:
        post:
            summary: Register new user
            security: []

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            required:
                                - email
                                - password
                                - firstName
                                - lastName
                            properties:
                                email:
                                    type: string
                                password:
                                    type: string
                                    format: password
                                firstName:
                                    type: string
                                lastName:
                                    type: string

            responses:
                "200":
                    description: Signup successful
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/profile:
        get:
            summary: Get user informations

            responses:
                "200":
                    $ref: "#/components/responses/UserInfoResponse"
                "500":
                    $ref: "#/components/responses/500"

        put:
            summary: Update user informations

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                password:
                                    type: string
                                firstName:
                                    type: string
                                lastName:
                                    type: string

            responses:
                "200":
                    $ref: "#/components/responses/UserInfoResponse"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/verify/{token}:
        get:
            summary: Verify the user email and activate the account
            security: []

            parameters:
                - name: token
                  in: path
                  required: true
                  schema:
                      type: string
                  description: Verification token sent via mail to the user

            responses:
                "200":
                    description: Account activated successfully
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

components:
    securitySchemes:
        JWTAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: |-
                Example:
                > Authorization: Bearer

    schemas:
        Error:
            type: object
            required:
                - message
                - code
            properties:
                message:
                    type: string
                code:
                    type: integer
        UserInfo:
            type: object
            required:
                - email
                - firstName
                - lastName
            properties:
                email:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string

    responses:
        UserInfoResponse:
            description: Complete user info
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/UserInfo"
        "400":
            description: Bad request
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"

        "500":
            description: Server error
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"

security:
    - JWTAuth: []
