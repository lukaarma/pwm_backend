openapi: 3.1.0

info:
    title: PassWordManagerAPI
    version: 1.4.0
    description: >-
        PassWordManager API used to manage users, personal credential databases and
        the services offered to the user
    contact:
        email: lukaarma@gmail.com
    license:
        name: MIT
        url: "https://opensource.org/licenses/MIT"

servers:
    - url: "https://dev.lukaarma.dynu.net/api"
      description: Development environment
    - url: "https://pwm.lukaarma.dynu.net/api"
      description: Production environment

paths:
    /user/login:
        post:
            summary: Login to existing user
            security: []

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                masterPwdHash:
                                    type: string
                                    format: password
                            required:
                                - email
                                - masterPwdHash

            responses:
                "200":
                    description: Login successful
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    firstName:
                                        type: string
                                    lastName:
                                        type: string
                                    email:
                                        type: string
                                        format: email
                                    PSK:
                                        type: string
                                        format: hex
                                    IV:
                                        type: string
                                        format: hex
                                required:
                                    - firstName
                                    - PSK
                                    - IV
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/signup:
        post:
            summary: Register new user
            security: []

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                                masterPwdHash:
                                    type: string
                                    format: hex
                                firstName:
                                    type: string
                                lastName:
                                    type: string
                                PSK:
                                    type: string
                                    format: hex
                                IV:
                                    type: string
                                    format: hex
                            required:
                                - email
                                - masterPwdHash
                                - firstName
                                - lastName
                                - PSK
                                - IV
            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/delete:
        post:
            summary: Delete the user's account. Cannot be undone!

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                masterPwdHash:
                                    type: string
                                    format: password
                            required:
                                - masterPwdHash

            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/profile:
        get:
            summary: Get user information

            responses:
                "200":
                    $ref: "#/components/responses/UserInfoResponse"
                "500":
                    $ref: "#/components/responses/500"

        put:
            summary: Update user First and Last name

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                firstName:
                                    type: string
                                lastName:
                                    type: string

            responses:
                "200":
                    $ref: "#/components/responses/UserInfoResponse"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/sendVerification:
        post:
            summary: Send a new token if the email belongs to a user awaiting verification
            security: []

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                email:
                                    type: string
                                    format: email
                            required:
                                - email
            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /user/verify/{token}:
        get:
            summary: Verify the user email and activate the account
            security: []

            parameters:
                - name: token
                  in: path
                  required: true
                  schema:
                      type: string
                      format: uuid
                  description: Verification token (UUIDv4) sent via mail to the user

            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /vault:
        get:
            summary: Download the Encrypted Vault from the database

            responses:
                "200":
                    $ref: "#/components/responses/VaultResponse"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

        post:
            summary: Create the new Encrypted Vault associated with the user, fail if Vault already exists

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Vault"

            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

        put:
            summary: Update the Encrypted Vault associated with the user, fail if key doesn't exists

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Vault"

            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /vault/delete:
        post:
            summary: Delete the user's vault. Cannot be undone!

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                masterPwdHash:
                                    type: string
                                    format: password
                            required:
                                - masterPwdHash

            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

    /vault/key:
        get:
            summary: Download the Protected Symmetric Key from the database

            responses:
                "200":
                    $ref: "#/components/responses/PSKResponse"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

        post:
            summary: Create the Protected Symmetric Key associated with the user, fail if key already exists

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PSK"

            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

        put:
            summary: Update the Protected Symmetric Key associated with the user, fail if key doesn't exists

            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/PSK"

            responses:
                "200":
                    $ref: "#/components/responses/200"
                "400":
                    $ref: "#/components/responses/400"
                "500":
                    $ref: "#/components/responses/500"

components:
    securitySchemes:
        JWTAuth:
            type: http
            scheme: bearer
            bearerFormat: JWT
            description: |-
                Example:
                > Authorization: Bearer

    schemas:
        Success:
            type: object
            properties:
                code:
                    type: integer
                    min: 100
                    max: 299
                message:
                    type: string
            required:
                - code
                - message

        Error:
            type: object
            properties:
                code:
                    type: integer
                    min: 300
                    max: 1000
                message:
                    type: string
            required:
                - code
                - message

        UserInfo:
            type: object
            properties:
                email:
                    type: string
                firstName:
                    type: string
                lastName:
                    type: string
            required:
                - email
                - firstName
                - lastName

        PSK:
            summary: Protected Symmetric Key as hex encoded string
            type: object
            properties:
                key:
                    type: string
                    format: hex
                IV:
                    type: string
                    format: hex
            required:
                - key
                - IV

        Vault:
            summary: Encrypted Vault as base64 encoded string
            type: object
            properties:
                version:
                    type: number
                    min: 1
                lastModified:
                    type: Date
                IV:
                    type: string
                    format: hex
                data:
                    type: string
                    format: base64
            required:
                - version
                - lastModified
                - IV
                - data

    responses:
        UserInfoResponse:
            description: Complete user info
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/UserInfo"

        PSKResponse:
            description: Protected Symmetric Key info, used on client for description
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/PSK"

        VaultResponse:
            description: Vault info, decrypted on client to access credentials
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Vault"

        "200":
            description: Request successful
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Success"

        "400":
            description: Bad request
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"

        "500":
            description: Server error
            content:
                application/json:
                    schema:
                        $ref: "#/components/schemas/Error"

security:
    - JWTAuth: []
